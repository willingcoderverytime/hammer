/// 我们定义了一个函数 countUniqueChars(s) 来统计字符串 s 中的唯一字符，并返回唯一字符的个数。
/// 例如：s = "LEETCODE" ，则其中 "L", "T","C","O","D" 都是唯一字符，因为它们只出现一次，所以 countUniqueChars(s) = 5 。
/// 本题将会给你一个字符串 s ，我们需要返回 countUniqueChars(t) 的总和，其中 t 是 s 的子字符串。输入用例保证返回值为 32 位整数。
/// 注意，某些子字符串可能是重复的，但你统计时也必须算上这些重复的子字符串（也就是说，你必须统计 s 的所有子字符串中的唯一字符）。
/// 
/// 示例 1：
/// 输入: s = "ABC"
/// 解释: 所有可能的子串为："A","B","C","AB","BC" 和 "ABC"。
/// 输出: 10
/// 输入: s = "ABA"
/// 输出: 8
/// 解释: 所有可能的子串为："A","B","C","AB","BC" 和 "ABA"。
/// -1 1 0    2 3 3  存在现象相同字母边界外的字母本身不提供任何贡献，  边界内的才有贡献。
fn test(){

}